<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nopper's blog]]></title>
  <link href="http://nopper.me/atom.xml" rel="self"/>
  <link href="http://nopper.me"/>
  <updated>2015-01-16T18:49:01.331Z</updated>
  <id>http://nopper.me/</id>
  <author>
    <name><![CDATA[Francesco Piccinno]]></name>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Facebook Hacker Cup 2015 Solutions Python]]></title>
    <link href="http://nopper.me/2015/01/16/facebook-hacker-cup-2015-solutions-python/"/>
    <id>http://nopper.me/2015/01/16/facebook-hacker-cup-2015-solutions-python/</id>
    <published>2015-01-16T18:38:02.000Z</published>
    <updated>2015-01-16T18:48:20.000Z</updated>
    <content type="html"><![CDATA[<p>In case you are wondering how to solve the problem of Facebook Hacker Cup 2015 Edition, here follows my simple solutions using in Python. I just copy pasted the code from my editor ;) No explanation the code is pretty self-explanatory and very easy to follow. I hope you find them useful.</p>
<h1 id="cooking-the-books">Cooking the Books</h1>
<p>Look at the <a href="https://googledrive.com/host/0B1rHL5Z9sBnVWXc0TWpBSkFBUjA" target="_blank">Problem statement</a> (<a href="https://www.facebook.com/hackercup/problems.php?pid=582062045257424&amp;round=742632349177460" target="_blank">official link</a>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(contents)</span>:</span>
    output = <span class="string">""</span>
    it = iter(contents.splitlines())
    num_testcases = int(it.next())

    <span class="keyword">for</span> testcase <span class="keyword">in</span> xrange(<span class="number">1</span>, num_testcases + <span class="number">1</span>):
        n = list(it.next())
        l = u = int(<span class="string">''</span>.join(n))

        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(n)):
            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(i + <span class="number">1</span>, len(n)):
                n[i], n[j] = n[j], n[i]

                <span class="keyword">if</span> n[<span class="number">0</span>] == <span class="string">'0'</span>:
                    <span class="keyword">continue</span>

                l = min(int(<span class="string">''</span>.join(n)), l)
                u = max(int(<span class="string">''</span>.join(n)), u)

                n[i], n[j] = n[j], n[i]

        output += <span class="string">"Case #%d: %d %d\n"</span> % (testcase, l, u)

    <span class="keyword">return</span> output


input_file = <span class="string">"""5
31524
897
123
10
5
"""</span>

<span class="keyword">assert</span> main(input_file) == <span class="string">"""Case #1: 13524 51324
Case #2: 798 987
Case #3: 123 321
Case #4: 10 10
Case #5: 5 5
"""</span>
</pre></td></tr></table></figure>


<h1 id="new-year-s-resolution">New Year&#39;s Resolution</h1>
<p>Look at the <a href="https://googledrive.com/host/0B1rHL5Z9sBnVMVdHeUhZSEZRbHM" target="_blank">Problem statement</a> (<a href="https://www.facebook.com/hackercup/problems.php?pid=1036037553088752&amp;round=742632349177460" target="_blank">official link</a>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(gp, gc, gf, xs)</span>:</span>
    <span class="keyword">if</span> gp == <span class="number">0</span> <span class="keyword">and</span> gc == <span class="number">0</span> <span class="keyword">and</span> gf == <span class="number">0</span>:
        <span class="keyword">return</span> <span class="keyword">True</span>

    <span class="keyword">if</span> gp &lt; <span class="number">0</span> <span class="keyword">or</span> gc &lt; <span class="number">0</span> <span class="keyword">or</span> gf &lt; <span class="number">0</span>:
        <span class="keyword">return</span> <span class="keyword">False</span>

    <span class="keyword">if</span> <span class="keyword">not</span> xs:
        <span class="keyword">return</span> <span class="keyword">False</span>

    p, c, f = xs[<span class="number">0</span>]
    xs = xs[<span class="number">1</span>:]

    <span class="keyword">return</span> solve(gp - p, gc - c, gf - f, xs) <span class="keyword">or</span> solve(gp, gc, gf, xs)


<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(contents)</span>:</span>
    output = <span class="string">""</span>
    it = iter(contents.splitlines())
    num_testcases = int(it.next())

    <span class="keyword">for</span> testcase <span class="keyword">in</span> xrange(<span class="number">1</span>, num_testcases + <span class="number">1</span>):
        gp, gc, gf = map(int, it.next().split())
        n = int(it.next())

        xs = []

        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):
            tup = map(int, it.next().split())
            xs.append(tup)

        xs.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])
        solvable = solve(gp, gc, gf, xs)

        output += <span class="string">"Case #%d: %s\n"</span> % (testcase, solvable <span class="keyword">and</span> <span class="string">"yes"</span> <span class="keyword">or</span> <span class="string">"no"</span>)

    <span class="keyword">return</span> output


input_file = <span class="string">"""5
100 100 100
1
100 100 100
100 100 100
3
10 10 40
10 30 10
10 60 50
100 100 100
5
40 70 30
30 10 40
20 20 50
10 50 90
40 10 20
292 264 512
20
909 302 261
705 597 823
291 51 126
28 697 57
593 31 826
311 256 57
292 14 47
29 730 716
12 529 146
768 16 439
37 472 15
350 192 34
163 468 238
69 173 10
203 72 690
424 875 213
223 593 292
151 46 10
88 90 16
773 653 711
991 827 352
20
29 560 929
139 681 102
144 853 10
84 729 80
218 20 67
140 80 901
428 20 500
520 970 128
422 419 30
413 101 192
467 448 501
32 939 684
34 20 38
251 317 132
588 437 10
648 21 79
391 25 14
499 22 24
854 77 361
405 25 20
"""</span>

<span class="keyword">assert</span> main(input_file) == <span class="string">"""Case #1: yes
Case #2: no
Case #3: yes
Case #4: no
Case #5: yes
"""</span>
</pre></td></tr></table></figure>


<h1 id="laser-maze">Laser Maze</h1>
<p>Look at the <a href="https://googledrive.com/host/0B1rHL5Z9sBnVVWhxMGhEMFhodG8" target="_blank">Problem statement</a> (<a href="https://www.facebook.com/hackercup/problems.php?pid=1523599254559737&amp;round=742632349177460" target="_blank">official link</a>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
</pre></td><td class="code"><pre><span class="keyword">import</span> sys

MOVES = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, -<span class="number">1</span>)]


<span class="function"><span class="keyword">def</span> <span class="title">turn_lasers</span><span class="params">(lasers)</span>:</span>
    trans = {
        <span class="string">'&lt;'</span>: <span class="string">'^'</span>,
        <span class="string">'^'</span>: <span class="string">'&gt;'</span>,
        <span class="string">'&gt;'</span>: <span class="string">'v'</span>,
        <span class="string">'v'</span>: <span class="string">'&lt;'</span>
    }
    <span class="keyword">return</span> [(i, j, trans[t]) <span class="keyword">for</span> i, j, t <span class="keyword">in</span> lasers]


<span class="function"><span class="keyword">def</span> <span class="title">was_hit</span><span class="params">(x, y, lasers)</span>:</span>
    <span class="keyword">for</span> lx, ly, t <span class="keyword">in</span> lasers:
        <span class="keyword">if</span> lx == x:
            <span class="keyword">if</span> t == <span class="string">'&lt;'</span> <span class="keyword">and</span> y &lt;= ly:
                <span class="keyword">return</span> <span class="keyword">True</span>
            <span class="keyword">if</span> t == <span class="string">'&gt;'</span> <span class="keyword">and</span> y &gt;= ly:
                <span class="keyword">return</span> <span class="keyword">True</span>

        <span class="keyword">if</span> ly == y:
            <span class="keyword">if</span> t == <span class="string">'^'</span> <span class="keyword">and</span> x &lt;= lx:
                <span class="keyword">return</span> <span class="keyword">True</span>
            <span class="keyword">if</span> t == <span class="string">'v'</span> <span class="keyword">and</span> x &gt;= lx:
                <span class="keyword">return</span> <span class="keyword">True</span>

    <span class="keyword">return</span> <span class="keyword">False</span>


<span class="function"><span class="keyword">def</span> <span class="title">solve_maze</span><span class="params">(ts, maze, lasers, visited, x, y, end)</span>:</span>
    lasers = turn_lasers(lasers)
    dead = was_hit(x, y, lasers)

    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(maze) <span class="keyword">or</span> y &gt;= len(maze[<span class="number">0</span>]) <span class="keyword">or</span> \
       dead <span class="keyword">or</span> (x, y, ts % <span class="number">4</span>) <span class="keyword">in</span> visited:
        <span class="keyword">return</span> sys.maxint

    <span class="keyword">if</span> (x, y) == end:
        <span class="keyword">return</span> <span class="number">0</span>

    <span class="comment"># We also consider laser positions in the state space</span>
    visited.add((x, y, ts % <span class="number">4</span>))

    <span class="keyword">return</span> <span class="number">1</span> + min(
        (solve_maze(ts + <span class="number">1</span>, maze, lasers, visited, x + i, y + j, end)
            <span class="keyword">for</span> i, j <span class="keyword">in</span> MOVES)
    )


<span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(contents)</span>:</span>
    output = <span class="string">""</span>
    it = iter(contents.splitlines())
    num_testcases = int(it.next())

    <span class="keyword">for</span> testcase <span class="keyword">in</span> xrange(<span class="number">1</span>, num_testcases + <span class="number">1</span>):
        h, w = map(int, it.next().split())

        maze = []
        lasers = []
        beg = <span class="keyword">None</span>
        end = <span class="keyword">None</span>

        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(h):
            line = []
            <span class="keyword">for</span> j, ch <span class="keyword">in</span> enumerate(it.next()):
                line.append(ch)

                <span class="keyword">if</span> ch == <span class="string">'S'</span>:
                    beg = (i, j)
                <span class="keyword">if</span> ch == <span class="string">'G'</span>:
                    end = (i, j)
                <span class="keyword">if</span> ch <span class="keyword">in</span> <span class="string">'&lt;&gt;^v'</span>:
                    lasers.append((i, j, ch))

            maze.append(line)

        steps = min(
            solve_maze(<span class="number">0</span>, maze, lasers, set(), beg[<span class="number">0</span>] + <span class="number">1</span>, beg[<span class="number">1</span>] + <span class="number">0</span>, end),
            solve_maze(<span class="number">0</span>, maze, lasers, set(), beg[<span class="number">0</span>] + <span class="number">0</span>, beg[<span class="number">1</span>] + <span class="number">1</span>, end),
            solve_maze(<span class="number">0</span>, maze, lasers, set(), beg[<span class="number">0</span>] - <span class="number">1</span>, beg[<span class="number">1</span>] + <span class="number">0</span>, end),
            solve_maze(<span class="number">0</span>, maze, lasers, set(), beg[<span class="number">0</span>] + <span class="number">0</span>, beg[<span class="number">1</span>] - <span class="number">1</span>, end),
        )

        output += <span class="string">"Case #%d: %s\n"</span> % (
            testcase,
            (steps == sys.maxint) <span class="keyword">and</span> <span class="string">"impossible"</span> <span class="keyword">or</span> str(steps + <span class="number">1</span>)
        )

    <span class="keyword">return</span> output

input_file = <span class="string">"""5
2 5
##^##
S...G
2 5
##v##
S...G
1 5
S..G&lt;
1 6
S...G&lt;
5 5
S....
.....
.&gt;v..
.^&lt;..
....G
"""</span>

output_file = <span class="string">"""Case #1: 6
Case #2: 4
Case #3: 3
Case #4: impossible
Case #5: 8
"""</span>

output = main(input_file)
<span class="keyword">assert</span> output == output_file
</pre></td></tr></table></figure>
]]></content>
    <category scheme="http://nopper.me/tags/python, facebook, programming/" term="python, facebook, programming"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Transactional Memory: a survey]]></title>
    <link href="http://nopper.me/2014/06/15/transactional-memory-a-survey/"/>
    <id>http://nopper.me/2014/06/15/transactional-memory-a-survey/</id>
    <published>2014-06-15T16:14:07.000Z</published>
    <updated>2014-06-15T16:18:16.000Z</updated>
    <content type="html"><![CDATA[<p>I am sharing an old survey on Transactional Memory. The work briefly
introduce the problem behind the realization of transactional memories
both from an hardware and a software perspective. The abstract
follows:</p>
<blockquote><p>Due to its inner implications in the parallel computing field, Transactional Memory is currently one of the hottest topics in computer research, having attracted the focus of several research experts in computer architecture, programming languages and parallel programming. Although the idea to support atomic operations in programming languages is quite old, the fundamental key point for its success in attracting, also major software companies and hardware vendors, is the belief that this technology can greatly simplify the development of efficient and correct shared-memory parallel programs.  This simplification is achieved by providing to the programmer a way to specify a sequence of instructions that must appear to execute atomically. Transactional memory implementation then optimistically executes these sequences or transactions concurrently to obtain high performance.  This essay will present a survey of the existing transactional memory solutions including both software and hardware implementations by introducing concepts, real problems and hardware architecture solutions for supporting this alternative solution to conven- tional lock based synchronization mechanism.</p>
</blockquote>


<p>The PDF can be consulted online following <a href="https://drive.google.com/file/d/0B61spacrZJooOU45amJRY2Rxdk5PcjVQWmxUVzM5TzBSNVNF/edit?usp=sharing">this
link</a>.</p>
]]></content>
    <category scheme="http://nopper.me/tags/stm/" term="stm"/>
    <category scheme="http://nopper.me/tags/htm/" term="htm"/>
    <category scheme="http://nopper.me/tags/transactional memory/" term="transactional memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Large Graph Processing]]></title>
    <link href="http://nopper.me/2014/06/06/large-graph-processing/"/>
    <id>http://nopper.me/2014/06/06/large-graph-processing/</id>
    <published>2014-06-06T19:24:51.000Z</published>
    <updated>2014-06-06T19:32:43.000Z</updated>
    <content type="html"><![CDATA[<p>I am writing this post to share the slides of the seminar I gave today
here at University of Pisa about Large Graph Processing. The abstract is
the following:</p>
<blockquote><p>The main topic of this seminar is large graph processing. We will try to
understand what are the problems that arise when dealing with large
datasets and which are the most used solutions today. Specifically we
will introduce the Bulk Synchronous Parallel (BSP) model that allows us
to process extremely large graphs by distributing the computation to
cluster of machines. We will then move our attention to graph
compression. We will survey two interesting graph compression
techniques, namely K2-trees and WebGraph. The former approach exploits
the sparsity of adjacency matrices to achieve compression through a
recursive spatial decomposition. The latter technique look for
repetitions in the adjacency list in order to achieve a good compression
ratio and fast decompression. At the end we will briefly discuss how the
WebGraph compression algorithm coupled with HyperLogLog counters was
used to obtain the famous “4 degree of separation” in the Facebook
graph.</p>
</blockquote>


<p>You can view the slides online following this
<a href="https://docs.google.com/presentation/d/1LG9AxU1rUabWCnnLjIDEzzrB7BSEKhtm5zLRf5C1Ly4/edit?usp=sharing" target="_blank">link</a>.</p>
]]></content>
    <category scheme="http://nopper.me/tags/graph/" term="graph"/>
    <category scheme="http://nopper.me/tags/compression/" term="compression"/>
    <category scheme="http://nopper.me/tags/webgraph/" term="webgraph"/>
    <category scheme="http://nopper.me/tags/hadoop/" term="hadoop"/>
    <category scheme="http://nopper.me/tags/giraph/" term="giraph"/>
    <category scheme="http://nopper.me/tags/bsp/" term="bsp"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Links of the Week 3]]></title>
    <link href="http://nopper.me/2014/03/08/links-of-the-week-3/"/>
    <id>http://nopper.me/2014/03/08/links-of-the-week-3/</id>
    <published>2014-03-08T11:36:37.000Z</published>
    <updated>2014-03-08T11:36:37.000Z</updated>
    <content type="html"><![CDATA[<p>Sorry for the delay but this week I was out in Bertinoro following a PhD school. Therefore I didn&#39;t have time to update my blog. Anyway here&#39;s what happened online during my absence:</p>
<ul>
<li><p>Two researchers from <a href="http://labs.bromium.com/2014/02/24/bypassing-emet-4-1/" target="_blank">Bromium Labs</a> published a technical white paper describing how to bypass the security measurements of <a href="http://support.microsoft.com/kb/2458544" target="_blank">EMET</a>. You can take a look at the white paper <a href="http://bromiumlabs.files.wordpress.com/2014/02/bypassing-emet-4-1.pdf" target="_blank">here</a>.</p>
</li>
<li><p>I don&#39;t know why I didn&#39;t discovered this before, but now it is possible to write Scala code that gets compiled to Javascript thanks to <a href="http://www.scala-js.org/" target="_blank">Scala.js</a>. It is still an experiment and blah blah, but you can play with it using <a href="http://www.scala-js-fiddle.com/" target="_blank">Scala js fiddle</a></p>
</li>
<li><p>If you think that this is not hipster enough I know a project you might like: <a href="http://nodyn.io/" target="_blank">Nodyn</a>: <em>a <a href="http://nodejs.org/" target="_blank">node.js</a> compatible framework, running on the JVM powered by the <a href="http://dynjs.org/" target="_blank">DynJS</a> Javascript runtime running under <a href="http://vertx.io/" target="_blank">vert.x</a> - the polyglot application platform and event bus</em> (unbelievable).</p>
</li>
<li><p>Still wondering how Shazam works? Well time to clean things up with this <a href="http://willdrevo.com/fingerprinting-and-audio-recognition-with-python.html" target="_blank">article</a> describing how <a href="https://github.com/worldveil/dejavu" target="_blank">Dejavu</a> works</p>
</li>
<li><p>I am gonna leave you with the <a href="http://www.stephendiehl.com/llvm/" target="_blank">last link</a> of the week, that describes how to implement a JIT compiled language with Haskell and LLVM. Long read but worth it.</p>
</li>
</ul>
]]></content>
    <category scheme="http://nopper.me/tags/lotw/" term="lotw"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Links of the Week 2]]></title>
    <link href="http://nopper.me/2014/02/23/links-of-the-week-2/"/>
    <id>http://nopper.me/2014/02/23/links-of-the-week-2/</id>
    <published>2014-02-23T21:00:00.000Z</published>
    <updated>2014-02-23T21:01:17.000Z</updated>
    <content type="html"><![CDATA[<p>This week I don&#39;t have so much to share. But I discovered that <a href="http://sharelatex.com/" target="_blank">ShareLatex</a> is now open source and its code available for download on GitHub. You might want to <a href="https://github.com/sharelatex/sharelatex" target="_blank">download it</a> and use it inside your scientific group. That&#39;s at least what I will try to do the next week :)</p>
<p>I am gonna leave you with an interesting video I found on the <a href="http://scikit-learn.org/" target="_blank">sklearn</a> mailing list. Jeremy Freeman explains how to use <a href="http://spark.incubator.apache.org/" target="_blank">Spark</a> and <a href="http://spark.incubator.apache.org/mllib/" target="_blank">MLlib</a> for Mapping and manipulating the brain at scale.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/7mmcEl_1CPw" frameborder="0" allowfullscreen></iframe></div>


<p>Of course if you are not aware of Spark go and check it out immediately! Check out the <a href="http://www.cs.berkeley.edu/~matei/papers/2012/nsdi_spark.pdf" target="_blank">paper</a> illustrating its RDD (aka Resilient Distributed Dataset) architecture. I will probably talk about bit more about this amazing project in a subsequent blog post.</p>
]]></content>
    <category scheme="http://nopper.me/tags/lotw/" term="lotw"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Telegram: goto fail (twice)]]></title>
    <link href="http://nopper.me/2014/02/23/multi-party-otr/"/>
    <id>http://nopper.me/2014/02/23/multi-party-otr/</id>
    <published>2014-02-23T12:09:09.000Z</published>
    <updated>2014-02-23T18:59:24.000Z</updated>
    <content type="html"><![CDATA[<p>Probably everyone knows that a couple of days ago <a href="https://www.facebook.com" target="_blank">Facebook</a> acquired <a href="http://www.whatsapp.com/" target="_blank">WhatsApp</a> for the astonishing price of 19 billion dollars. Anyway that&#39;s not the point of this post. The problem here is the inherent privacy problem that this acquisition involves.  Online there are tons of people that are concerned for their privacy and they are looking for possible instant messagging alternatives which are encrypted and privacy aware. Probably the one which is receiving more attention right now is <a href="https://telegram.org/" target="_blank">Telegram</a>.</p>
<a id="more"></a>

<p>I gave a quick read about <a href="https://core.telegram.org/techfaq" target="_blank">protocol specification</a> and tried to understand how <a href="http://en.wikipedia.org/wiki/Off-the-Record_Messaging" target="_blank">OTR</a> messaging is implemented to offer end to end encryption and <a href="http://en.wikipedia.org/wiki/Forward_secrecy" target="_blank">Perfect Forward Secrecy</a>. I am not an expert in cryptography but here&#39;s what I understand from a quick read of the protocol:</p>
<ul>
<li>It is not a zero knowledge architecture. In telegram you have to trust someone, and that someone is the <em>Telegram server</em></li>
<li>Chats and group chats are not encrypted end-to-end. What I mean here is that, although the message exchange between you and server is adequately encrypted, the server has still to decrypt (and possibly read/store/analyze your incoming messages) before relaying to the final recipient(s).</li>
<li>Secret chats implement OTR through Diffie Hellman algorithm key exchange, but Diffie Hellman does not provide authentication by default so it is vulnerable to MITM attacks. It is theoretically possible that the Telegram server acts as <em>Mallory</em> here and intercepting every single message being exchanged between you (<em>Alice</em>) and your bestest friend <em>Bob</em>.</li>
<li>Perfect Forward Secrecy is said to be implemented but it is not. If you want PFS you simply have to create another Secret Chat. Cool.</li>
</ul>
<p>What a bummer! <strong>EDIT:</strong> <em>Apparently I am not the only one who thinks that the entire protocol and trust the server approach is flawed. Take a look at this <a href="http://unhandledexpression.com/2013/12/17/telegram-stand-back-we-know-maths/" target="_blank">blog post</a> that explains each point in detail.</em> </p>
<p>I looked around to check whether it is possible to create a zero-knowledge architecture supporting multi party OTR messaging. The first place I looked for was Wikipedia, that explicitly says:</p>
<blockquote><p>Due to limitations of the protocol, OTR does not support multi-user group chat as of 2009 but may be implemented in the future.</p>
<footer><strong>Wikipedia</strong><cite><a href="http://en.wikipedia.org/wiki/Off-the-Record_Messaging#Limitations" target="_blank">en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>So I started searching for existing literature in this field using Google Scholar. I found several papers trying to solve the problem (see <a href="http://dl.acm.org/citation.cfm?id=1653705" target="_blank">Goldberg et al.</a> and <a href="http://dl.acm.org/citation.cfm?id=2517867" target="_blank">Liu et al.</a>). But since I am not an expert in cryptography I was looking for something lighter to read. I discovered that the problem was actually solved (I guess, but please correct me if I am wrong) by the guys behind <a href="https://getsyme.com/" target="_blank">Syme</a>, a <em>zero-knowledge key architecture and encrypted messaging platform</em>. You can find the white paper of their architecture <a href="https://github.com/symeapp/syme" target="_blank">here</a>. Starting from their premises I decided to implement a demo app in Python implementing multiparty OTR.</p>
<p>I am gonna be using <code>pyelliptic</code>, <code>pbkdf2</code> and <code>srp</code>. The first package is a really cool binding to OpenSSL, but be sure to have an up to date version otherwise you will encounter in some trouble. If you are a Mac OS user I suggest you to install an updated version of openssl using <code>brew install openssl</code>.</p>
<p>Then you can safely use <code>DYLD_LIBRARY_PATH=/usr/local/Cellar/openssl/1.0.1f/lib</code> prior to python invokation, as I explain in this Github <a href="https://github.com/yann2192/pyelliptic/issues/11" target="_blank">issue</a>. The second package (<code>pbkdf2</code>) provides the password-based key derivation function, <a href="http://en.wikipedia.org/wiki/PBKDF2" target="_blank">PBKDF2</a>. The latter implements the <a href="http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol" target="_blank">Secure Remote Password protocol</a> (SRP), a cryptographically strong authentication protocol for password-based over an insecure network connection. You can easilly install the three dependecies with the usual <code>pip install &lt;packagename&gt;</code>.</p>
<p>You can find the code of this <a href="https://github.com/nopper/secure-chat-demo" target="_blank">demo</a> on GitHub. I am not going to do a step by step explanation of the code but rather explain what it happens from an high level perspective. First we import all the libraries:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">import</span> json
<span class="keyword">import</span> pbkdf2
<span class="keyword">from</span> srp <span class="keyword">import</span> _pysrp <span class="keyword">as</span> srp
<span class="keyword">import</span> pyelliptic
</pre></td></tr></table></figure>


<p>We then define an helper class for dealing with <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard" target="_blank">AES</a>-<a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher_feedback_.28CFB.29" target="_blank">CFB</a> (256 bit key) encryption/decription of texts.  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">AESCipher</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key)</span>:</span>
        self.key = key

    <span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(self, s)</span>:</span>
        BS = <span class="number">16</span>
        <span class="keyword">return</span> s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 

    <span class="function"><span class="keyword">def</span> <span class="title">unpad</span><span class="params">(self, s)</span>:</span>
        <span class="keyword">return</span> s[<span class="number">0</span>:-ord(s[-<span class="number">1</span>])]

    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, raw)</span>:</span>
        raw = self.pad(raw)
        iv = pyelliptic.Cipher.gen_IV(<span class="string">'aes-256-cfb'</span>)
        ctx = pyelliptic.Cipher(self.key, iv, <span class="number">1</span>, ciphername=<span class="string">'aes-256-cfb'</span>)
        ciphertext = ctx.update(raw)
        ciphertext += ctx.final()
        <span class="keyword">return</span> (iv + ciphertext).encode(<span class="string">"hex"</span>)

    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, enc)</span>:</span>
        enc = enc.decode(<span class="string">"hex"</span>)
        (iv, enc) = enc[:<span class="number">16</span>], enc[<span class="number">16</span>:]
        ctx = pyelliptic.Cipher(self.key, iv, <span class="number">0</span>, ciphername=<span class="string">'aes-256-cfb'</span>)
        <span class="keyword">return</span> self.unpad(ctx.ciphering(enc))
</pre></td></tr></table></figure>


<p>We then define a class for our zero-knowledge server, as in Syme whitepaper. The server will just store a salt and a verification key for each user (SRP protocol). The server can additionally store the keychain of each user (encrypted with the other <code>initialization_key</code> of the client), if the user is willing to do so.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>
        self.users = {}
        self.verifiers = {}
        self.storage = {}

    <span class="function"><span class="keyword">def</span> <span class="title">auth_request</span><span class="params">(self, username, A)</span>:</span>
        salt, vkey = self.users[username]

        verifier = srp.Verifier(username, salt, vkey, A)
        s, B = verifier.get_challenge()

        self.verifiers[username] = verifier

        <span class="keyword">return</span> s, B

    <span class="function"><span class="keyword">def</span> <span class="title">verify_session</span><span class="params">(self, username, M)</span>:</span>
        HAMK = self.verifiers[username].verify_session(M)

        <span class="keyword">if</span> HAMK <span class="keyword">is</span> <span class="keyword">None</span>:
            <span class="keyword">raise</span> srp.AuthenticationFailed()

        <span class="keyword">return</span> HAMK

    <span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(self, username, **kwargs)</span>:</span>
        self.storage[username] = kwargs
        <span class="keyword">print</span> <span class="string">"Stored %s for %s"</span> % (<span class="string">', '</span>.join(kwargs.keys()), username)
</pre></td></tr></table></figure>


<p>We then define <code>User</code> object representing the user that tries to register to the <code>Server</code> and communicates with other peers through the use of <code>send_message</code> primitive. Here we assume the server to correctly deliver ECC public keys. MITM attack is possible if the server is acting as a rouge server. In order to solve this problem the exchange of keys can be executed offline. In this case <em>Alice</em> and <em>Bob</em> will set up an appointment in the public park to exchange their public keys. Another approach is using the <a href="http://en.wikipedia.org/wiki/Socialist_millionaire" target="_blank">Socialist Millionaire problem</a> (funny name) as in Section 2.3.5 of <a href="http://www.cypherpunks.ca/~iang/pubs/otr_userstudy.pdf" target="_blank">A User Study of Off-the-Record Messaging </a>.</p>
<p>Creating a group chat (2 or more peers) involves the creation of new ECC key pairs for each peer. In this way it is possible to easilly implement forward secrecy. For example, every day the peers can decide to generate new key pairs.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">create_verification_key</span><span class="params">(user, salt)</span>:</span>
    hash_class = user.hash_class
    <span class="keyword">return</span> srp.long_to_bytes(pow(user.g, srp.gen_x(hash_class, salt, user.I, user.p), user.N))

<span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password)</span>:</span>
        self.username = username
        self.salt = srp.long_to_bytes(srp.get_random(<span class="number">16</span>))

        key = pbkdf2.PBKDF2(password, self.salt).read(<span class="number">64</span>)
        self.authentication_key, self.initialization_key = (key[:<span class="number">32</span>], key[<span class="number">32</span>:])

        self.cipher = AESCipher(self.initialization_key)
        self.ecc_key = pyelliptic.ECC()

        self.keychain = {
            self.username: self.ecc_key.get_pubkey(),
        }

        self.ecc_group_key = {}
        self.group_keys = {}

    <span class="function"><span class="keyword">def</span> <span class="title">get_srp_user</span><span class="params">(self)</span>:</span>
        username = self.username
        password = self.initialization_key
        <span class="keyword">return</span> srp.User(username, password)

    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, server)</span>:</span>
        <span class="keyword">assert</span> self.username <span class="keyword">not</span> <span class="keyword">in</span> server.users, <span class="string">"%s already registered"</span> % self.username

        salt = self.salt
        user = self.get_srp_user()

        server.users[self.username] = (salt, create_verification_key(user, salt))

    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self, server)</span>:</span>
        user = self.get_srp_user()
        username, A = user.start_authentication()

        <span class="comment"># We send username and A to the server and obtain a challenge</span>
        s, B = server.auth_request(username, A)
        M = user.process_challenge(s, B)

        <span class="keyword">if</span> M <span class="keyword">is</span> <span class="keyword">None</span>:
            <span class="keyword">raise</span> srp.AuthenticationFailed()

        <span class="comment"># Send M to the verifier</span>
        HAMK = server.verify_session(username, M)
        user.verify_session(HAMK)

        <span class="keyword">if</span> user.authenticated():
            <span class="keyword">print</span> <span class="string">"Successfully logged in"</span>

            encrypted = self.cipher.encrypt(self.ecc_key.get_pubkey())

            server.store(username, mykey=encrypted)

    <span class="function"><span class="keyword">def</span> <span class="title">create_group</span><span class="params">(self, name, users)</span>:</span>
        <span class="comment"># Now every other user will generate a pub/key pair</span>
        <span class="keyword">for</span> user <span class="keyword">in</span> users:
            user.ecc_group_key[name] = pyelliptic.ECC()
            user.group_keys[name] = {
                user.username: user.ecc_group_key[name].get_pubkey()
            }

        <span class="keyword">for</span> source <span class="keyword">in</span> users:
            <span class="keyword">for</span> dest <span class="keyword">in</span> users:
                <span class="keyword">if</span> source != dest:
                    source.group_keys[name][dest.username] = dest.ecc_group_key[name].get_pubkey()


    <span class="function"><span class="keyword">def</span> <span class="title">send_message</span><span class="params">(self, name, message)</span>:</span>
        session_key = pyelliptic.OpenSSL.rand(<span class="number">32</span>)
        ekeys = []

        <span class="keyword">for</span> username, pubkey <span class="keyword">in</span> self.group_keys[name].items():
            ecc_key = self.ecc_group_key[name]
            ekeys.append(ecc_key.encrypt(session_key, pubkey).encode(<span class="string">'hex'</span>))

        c = AESCipher(session_key)
        emessage = c.encrypt(message)

        encoded = json.dumps({
            <span class="string">'group'</span>: name,
            <span class="string">'message'</span>: emessage,
            <span class="string">'keys'</span>: ekeys,
        })

        <span class="keyword">return</span> Message(self.username, self.ecc_key.sign(encoded), encoded)
</pre></td></tr></table></figure>



<p>The last piece missing is the <code>Message</code> class representing the message being exchanged between peers:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Message</span><span class="params">(object)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source, signature, encoded)</span>:</span>
        self.source = source
        self.signature = signature
        self.encoded = encoded

    <span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(self, user)</span>:</span>
        pubkey_source = user.keychain[self.source]
        <span class="keyword">return</span> pyelliptic.ECC(pubkey=pubkey_source).verify(self.signature, self.encoded)

    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, user)</span>:</span>
        decoded = json.loads(self.encoded)
        ecc_key = user.ecc_group_key[decoded[<span class="string">'group'</span>]]

        <span class="keyword">for</span> key <span class="keyword">in</span> decoded[<span class="string">'keys'</span>]:
            <span class="keyword">try</span>:
                session_key = ecc_key.decrypt(key.decode(<span class="string">'hex'</span>))
                c = AESCipher(session_key)
                <span class="keyword">print</span> <span class="string">"%s received: %s"</span> % (user.username, c.decrypt(decoded[<span class="string">'message'</span>]))
                <span class="keyword">return</span>
            <span class="keyword">except</span>:
                <span class="keyword">print</span> <span class="string">"Trying next key"</span>
</pre></td></tr></table></figure>


<p>Now you can try to play the secure chat game easilly:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>server = Server()

alice = User(<span class="string">"Alice"</span>, <span class="string">"hello"</span>)
alice.register(server)
alice.login(server)

bob = User(<span class="string">"Bob"</span>, <span class="string">"hello"</span>)
bob.register(server)
bob.login(server)

alice.create_group(<span class="string">'#lmv'</span>, (alice, bob))
message = alice.send_message(<span class="string">'#lmv'</span>, <span class="string">'Hello there'</span>)

message.read(bob)
message.read(alice)
</pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>Successfully logged in
Stored mykey for Alice
Successfully logged in
Stored mykey for Bob
Bob received: Hello there
Trying next key
Alice received: Hello there
</pre></td></tr></table></figure>


<p><strong>DISCLAIMER:</strong> This entire protocol might be wrong and flawed. I am not a cryptographer so use the information of this blog post at your own discretion and risk.</p>
<p><em>PS: for those of you who understand the reference yes the title of this post referes to the Apple bug in SSL stack. If you are intereseted in reading more about it, check out <a href="http://www.msuiche.net/2014/02/22/sslverifysignedserverkeyexchange-a-k-a-the-goto-epicfail-bug/" target="_blank">this link</a>.</em></p>
]]></content>
    <category scheme="http://nopper.me/tags/telegram/" term="telegram"/>
    <category scheme="http://nopper.me/tags/cryptography/" term="cryptography"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Links of the Week]]></title>
    <link href="http://nopper.me/2014/02/16/links-of-the-week/"/>
    <id>http://nopper.me/2014/02/16/links-of-the-week/</id>
    <published>2014-02-16T12:09:09.000Z</published>
    <updated>2014-02-16T12:45:59.000Z</updated>
    <content type="html"><![CDATA[<p>In order to keep this blog up to date I decided to create this periodic blog post format called <strong>Links of the week</strong> where I share all of my findings during the past week.</p>
<ul>
<li>The first link I wanna share is a YouTube video, actually a talk from <a href="http://alexgaynor.net/" target="_blank">Alex Gaynor</a> (yes one of the contributor of PyPy), with the title &quot;<em>So you want to write an interpreter?</em>&quot; from PyCon&#39;13. It just gives a pretty quick review about the basic concepts for writing an interpreter for a custom DSL, such as Lexer, Parser, AST, Bytecode-compiler and Bytecode-interpreter. If you are a rusty about these basic concepts give it a shot.</li>
</ul>
<a id="more"></a>

<ul>
<li>Well you may wonder how come I found this video. That&#39;s simple. I was looking at the <a href="https://github.com/hylang/hy/" target="_blank">implementation</a> of <a href="http://hylang.org/" target="_blank">Hy language</a>, a Lisp dialect that&#39;s embedded in Python. Hy simply uses a the <a href="https://github.com/alex/rply" target="_blank">rply</a> lexer (that is a port of David Beazley&#39;s <a href="http://www.dabeaz.com/ply/" target="_blank">PLY</a> to RPython created by Alex Gaynor) to create AST trees which are remapped to Python AST tress (using the <a href="http://docs.python.org/3.3/library/ast.html" target="_blank"><code>ast</code></a> module) and compiled seamlessly in python bytecode. If you wanna give it a try there&#39;s also an <a href="http://try-hy.appspot.com/" target="_blank">online interpreter</a> where you can eval hy code on the fly. You can try some fibonacci code:</li>
</ul>
<figure class="highlight"><figcaption><span>Fibonacci inHy</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>    <span class="list">(<span class="title"><span class="built_in">defn</span></span> fibo <span class="collection">[n]</span>
      <span class="list">(<span class="title"><span class="built_in">if</span></span> <span class="list">(<span class="title"><span class="built_in">&lt;=</span></span> n<span class="number"> 1</span>)</span>
        n
        <span class="list">(<span class="title"><span class="built_in">+</span></span> <span class="list">(<span class="title">fibo</span> <span class="list">(<span class="title"><span class="built_in">-</span></span> n<span class="number"> 1</span>)</span>)</span> <span class="list">(<span class="title">fibo</span> <span class="list">(<span class="title"><span class="built_in">-</span></span> n<span class="number"> 2</span>)</span>)</span>)</span>)</span>)</span>
</pre></td></tr></table></figure>


<ul>
<li><p>Interested in some black security magic? I also found source code of <a href="https://github.com/chokepoint/azazel" target="_blank">azazel</a> an interesting userland rootkit that exploits <code>LD_PRELOAD</code> for hiding his presence.</p>
</li>
<li><p>Ok probably we are getting too serious. Better take a break and play Flappy Bird, using <a href="http://sarvagyavaish.github.io/FlappyBirdRL/" target="_blank">reinforcement learning</a>. The code of this funny experiment can be found <a href="https://github.com/SarvagyaVaish/FlappyBirdRL" target="_blank">here</a>.</p>
</li>
</ul>
<p>See you next week!</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/BV7a4rufMOg" frameborder="0" allowfullscreen></iframe></div>
]]></content>
    <category scheme="http://nopper.me/tags/lotw/" term="lotw"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Online Machine Learning courses]]></title>
    <link href="http://nopper.me/2014/02/15/online-machine-learning-courses/"/>
    <id>http://nopper.me/2014/02/15/online-machine-learning-courses/</id>
    <published>2014-02-15T18:15:50.000Z</published>
    <updated>2014-02-23T17:39:52.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I gained interest in the field of Machine Learning. I am writing this post to share some links about interesting material you can freely find on the Internet.</p>
<a id="more"></a>

<p>Probably the most valuable resource that serves as gentle and complete introduction to the field of Machine Learning is the <a href="https://www.coursera.org/course/ml" target="_blank">Machine Learning</a> course taught by <a href="http://cs.stanford.edu/people/ang/" target="_blank">Andrew Ng</a> on <a href="https://www.coursera.org" target="_blank">Coursera</a>. I strongly suggest you to take this course if you don&#39;t have a clear idea of what Machine Learning is or just want to refresh some concept. It is very well taught and includes a set of homework assignment that lets you better understand the topics introduced every unit.</p>
<p>I also found a bunch of videos on YouTube of <a href="http://www.ics.uci.edu/~ihler/" target="_blank">Alexander Ihler</a>, associate professor at UC Irvine. The <a href="https://www.youtube.com/user/atihler/videos" target="_blank">videos</a> are lectures from his <a href="http://sli.ics.uci.edu/Classes/2014W-178" target="_blank">CS178</a> course.</p>
<p>If you want to go a little bit deeper and formal I suggest you this <a href="https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH" target="_blank">YouTube playlist</a> containing all the video lectures from the Neural Network class of Université de Sherbrooke. The lectures are held by <a href="http://www.dmi.usherb.ca/~larocheh/index_en.html" target="_blank">Hugo Larochelle</a> and requires a little bit of mathematical background. There are several interesting parts such as Deep Learning, Computer Vision and Natural language processing.</p>
<p>Regarding Deep Learning I also want to suggest another link that is the <a href="http://deeplearning.stanford.edu/wiki/index.php/Main_Page" target="_blank">Deep Learning wiki</a> from Stanford. It is a wiki containing more detailed information about Deep Learning algorithms.</p>
<p>This completes the set of links regarding the Machine Learning field. I hope you&#39;ll find them useful.</p>
]]></content>
    <category scheme="http://nopper.me/tags/machine-learning/" term="machine-learning"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://nopper.me/2013/12/01/archpwn-merged-blackarch/"/>
    <id>http://nopper.me/2013/12/01/archpwn-merged-blackarch/</id>
    <published>2013-12-01T14:06:26.000Z</published>
    <updated>2013-12-22T18:22:52.000Z</updated>
    <content type="html"><![CDATA[<p>Well I guess it&#39;s time to move. It was a while since I was planning this major clean up in my public electronic life and now it&#39;s the day. For those of you who are not following my updates (which I guess comprisesthe entire universe but me) I decided to finally shut down the <a href="http://blog.archpwn.org" target="_blank">old blog</a> (that actually will at some point in the future point back here) and start a new one with the ultimate and probably illusory goal to document my new life as grown man (aka PhD, feel the subtleties?), I guess.</p>
<p>The move is also perfectly timed, since I decided to freeze the development of <a href="http://www.archpwn.org" target="_blank">ArchPwn</a>, this old project of mine, that was not maintained anymore. For the old users which were hoping for a new release or the continuation of the project, don&#39;t worry the packages and some of the code base are being merged into <a href="http://blackarch.org/" target="_blank">BlackArch</a>, another security distro based on <a href="http://www.archlinux.org" target="_blank">ArchLinux</a>, that is being developed by <a href="https://github.com/paraxor" target="_blank">Evan Teitelman</a>, <a href="https://github.com/archey" target="_blank">Tyler Benett</a>, Levon Kayan and nrz from <a href="http://www.nullsecurity.net/" target="_blank">NullSecurity</a>. These guys are cool so I am leaving you in good hands :)</p>
<p>I am also completely removing the old mediawiki site of ArchPwn</p>
]]></content>
    <category scheme="http://nopper.me/tags/archpwn/" term="archpwn"/>
  </entry>
</feed>
